<div>
    <EditForm Model="viewModel" @ref="editForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="txtTitle">Title:</label>
        <input id="txtTitle" type="text" @bind-value="viewModel.Title" @bind-value:event="oninput" />
        <label for="dateDue">Due By:</label>
        <input id="dateDue" type="date" @bind-value="viewModel.DueBy" />
        <button type="button" @onclick="ValidateAndAdd" class="btn btn-primary">Add</button>
    </EditForm>
</div>
<hr>
<div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>#</th>
                <th>Title</th>
                <th>Due By</th>
                <th>Complete</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var todo in store.GetAll())
        {
            var checkboxId = $"isCompleteItem{todo.Id}";

            <tr>
            <td>@todo.Id</td>
            <td>@todo.Title</td>
            <td>@if(todo.DueBy != null) {@todo.DueBy} else { <span>N/A</span> } </td>
            <td>
                <input id="@checkboxId" type="checkbox" @onchange="eventArgs => store.Mutation_UpdateIsComplete(todo.Id, (bool?)eventArgs?.Value)" checked="@todo.IsComplete">
            </td>
            <td><button type="button" @onclick="() => store.Mutation_Delete(todo.Id)" class="btn btn-danger">Delete</button></td>
            </tr>
        }
        </tbody>    
    </table>
</div>

<style>
    .table-class {
        border-collapse: collapse;
        width: 100%;
    }
    .table-class td, .table-class th {
        border: 1px solid #ddd;
        padding: 8px;
    }
</style>

@using System.ComponentModel.DataAnnotations;
@implements IDisposable;
@implements IObserver<TodoItemStore>;
@inject TodoItemStore store;
@page "/"
@code
{
    EditForm? editForm;
    TodoViewModel viewModel = new TodoViewModel();

    public class TodoViewModel
    {
        [Required(ErrorMessage = "Title is required")]
        public string Title { get; set; } = string.Empty;

        public DateOnly? DueBy { get; set; }
    }

    public void ValidateAndAdd()
    {
        var isValid = editForm?.EditContext?.Validate();

        if ((isValid ?? false))
        {
            store.Mutation_Create(viewModel.Title, viewModel.DueBy == default ? null : viewModel.DueBy);
            viewModel.Title = string.Empty;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        store.Subscribe(this);
        await store.Action_Reload();
    }

    public void Dispose()
    {
        store.Unsubscribe(this);
    }

    public void OnCompleted()
    {
        // Implement the OnCompleted() method here.
        Console.WriteLine("Completed");
    }

    public void OnError(Exception error)
    {
        // Implement the OnError(Exception) method here.
        Console.WriteLine("Error");
    }

    public void OnNext(TodoItemStore value)
    {
        StateHasChanged();
    }
}